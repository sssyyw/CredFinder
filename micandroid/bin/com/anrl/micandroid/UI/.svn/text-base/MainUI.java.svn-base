package com.anrl.micandroid.UI;

//Author Wesley Ellis; wesleyjellis@gmail.com
//This is the first activity a user will see
//Consider it the main{}


import com.anrl.micandroid.LocalService;
import com.anrl.micandroid.Messages;
import com.anrl.micandroid.R;
import com.anrl.micandroid.crypto.Registration;
import com.anrl.micandroid.netcomm.Auth;
import android.app.Activity;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.Toast;
import android.widget.ToggleButton;

public class MainUI extends Activity {

	// VARS
	private BluetoothAdapter mBluetoothAdapter = null;
	private static final String TAG = "micandroid";	
	private static final int DIALOG = 1;

	
	//This is essentially our main{} 
	//We need to setup the UI and associated event listeners
	@Override
	public void onCreate(Bundle savedInstanceState) {
		Log.d(TAG, "++BEGIN MICANDROID++");
		//Let the super do all the really hard stuff
		super.onCreate(savedInstanceState);
		//Get rid of the ugly title that is usually there
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		
		//Set the layout from res/layout/main.xml
		//Note R.layout.main maps to res/layout/main.xml
		setContentView(R.layout.main);
		
		//Get the default adapter
		mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

		// IF There's no bluetooth adapter then bail
		if (mBluetoothAdapter == null) {
			// Create an error pop up
			makeToast("No Bluetooth Adapter!");
			finish();
		}

		// If there is a bluetooth adapter but it's off, turn it on using
		// android's built in activity
		if (!mBluetoothAdapter.isEnabled()) {
			Intent enableIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
			startActivityForResult(enableIntent, 0);
		}
		
		//R.id.NAME refer to the android:id fields in the layout xml files
		final Button authButton = (Button) findViewById(R.id.Auth);
		final Button MICAutility = (Button) findViewById(R.id.MICAutility);
		final Button makeCloudButton = (Button) findViewById(R.id.SetupCloud);
		final Button dissolveCloud = (Button) findViewById(R.id.DissolveCloud);

		final ToggleButton toggle = (ToggleButton) findViewById(R.id.ToggleService);
		toggle.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				if (toggle.isChecked()) {
					//Turn on discoverability if checked
					CheckBox checkboxx = (CheckBox) findViewById(R.id.Discoverable);
					if (checkboxx.isChecked()) {
						//If we're not already discoverable, start an intent to enable that
						if (mBluetoothAdapter.getScanMode() != BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {
							Intent discoverableIntent = 
								new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
							discoverableIntent.putExtra(
									BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 300);
							startActivity(discoverableIntent);
						}
					}
					//Start the Service
					beginServicing();
				} else {
					//Kill the Service
					endServicing();
				}

			}
		});

		//Buttons use annonymous inner class listeners
		//It seems to be the most used style
		authButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				auth();
			}
		});

		MICAutility.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				MICAUtil();
			}
		});

		makeCloudButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				wizard();
			}
		});

		dissolveCloud.setOnClickListener(new View.OnClickListener() {
			public void onClick(View v) {
				dissolve();
			}
		});

	}
	
	//This Handler deals with all the messages Auth might pass
	//Again, sorry for the next switch statements
	//It's easier than tracking a bunch of ints
	private final Handler mHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			String toToast = "never set";
			switch(msg.what){
			case Messages.AUTH:
				switch(msg.arg1){
				case Auth.ERROR:
					dismissDialog(DIALOG);
					switch(msg.arg2){
					case Auth.ARGS.NOT_REGISTERED:
						Log.d(TAG, "we're not registered");
						toToast = "ERROR: Not Registered";
						break;
					case Auth.ARGS.SERVER_UNREACHABLE:
						Log.d(TAG, "server not reachable");
						toToast = "ERROR: Server Unavaialble";
						break;
					case Auth.ARGS.CRYPTO_ERROR:
					case Auth.ARGS.GENERAL_ERROR:
						toToast = "ERROR: Something generally went wrong";
						break;
					case Auth.ARGS.HASH_FAILED:
						toToast = "ERROR: A device failed to respond to a hash";
						break;
					default:
						Log.d(TAG, "we got an unknown arg1 in Error");
					}
					break;
				case Auth.SUCCESS:
					dismissDialog(DIALOG);
					//This is a string containing the username and password
					//TODO make proper use of this
					String result = (String) msg.obj;
					toToast = "Success! : " + result;
					break;
				default:
					Log.d(TAG, "unknown msg.what");
				}
				break;
			default:
				toToast = "Unknow message type";
			}
			makeToast(toToast);
		}
	};

	private void test() {
		//This is our test activity. Doesn't do anything ATM
		Intent i = new Intent(this, Test.class);
		startActivity(i);
	}

	private void wizard() {
		//Start the cloud formation wizard
		//If we are already registered, don't let the user form another cloud
		Registration temp = Registration.getRegistration(getApplicationContext());
		if(temp.isRegistered()){
			makeToast("Errm... You're already registered, please unregister before setting up a cloud");
		}
		else{
			Intent i = new Intent(this, SetupWizardUI.class);
			startActivity(i);
		}
	}

	private void MICAUtil() {
		//Launches an activity that can be used to test MICA clients
		Intent i = new Intent(this, MICAUtilUI.class);
		startActivity(i);
	}

	private void beginServicing() {
		//Starts the Service which provides mica client capabilities to other devices
		Intent i = new Intent(this, LocalService.class);
		startService(i);
	}

	private void endServicing() {
		//Stops the Service
		Intent i = new Intent(this, LocalService.class);
		stopService(i);
	}

	private void dissolve(){
		makeToast("no yet implemented");
	}

	private void unregister(){
		//This is an easy way to unregister yourself
		//It should probably be removed in the final version
		Registration reg = Registration.getRegistration(getApplicationContext());
		if(reg.isRegistered()){
			if(reg.unregister()){
				makeToast("Unregistered!");
			}
			else{
				makeToast("Error: not able to unregister");
			}
		}
		else{
			makeToast("Oops! You're not registered at the moment");
		}
	}
	private void auth(){
		//Start the authentication thread
		Auth temp = new Auth(mHandler, getApplicationContext());
		temp.authenticate();
		showDialog(DIALOG);
	}
	
	//Doesn't actually make toast, but creates a message popup
	private void makeToast(String message){
		Toast.makeText(getApplicationContext(), message,
				Toast.LENGTH_LONG).show();
	}


	//This gets called when we call showDialog
	//It let's us configure the nature of the dialog
	//In this case we just want a simple indeterminate length loading box
	@Override
	protected Dialog onCreateDialog(int id) {
		ProgressDialog dialog = new ProgressDialog(this);
		dialog.setMessage("Loading");
		//No progress bar, just a spinner
		dialog.setIndeterminate(true);
		//Can't be cancelled by pressing back
		dialog.setCancelable(false);
		return dialog;
	}
	
	//This gets called when the menu button is pressed
	//Tell the system what xml file we want to use for the menu layout
	//In this case res/menu/mainmenu.xml
	@Override
	public boolean onCreateOptionsMenu(Menu menu){
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.mainmenu, menu);
		return true;
	}
	
	//This gets called when one of the menu items is pressed
	//Figure out what we should true
	//Needs to return true for some reason
	public boolean onOptionsItemSelected(MenuItem item){
		switch(item.getItemId()){
		case R.id.BeginWizard:
			wizard();
			break;
		case R.id.Dissolve:
			dissolve();
			break;
		case R.id.BTMenu:
			MICAUtil();
			break;
		case R.id.UnReg:
			unregister();
			break;
		case R.id.TEST:
			test();
			break;
		}

		return true;
	}
}